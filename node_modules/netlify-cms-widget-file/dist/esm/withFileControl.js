"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withFileControl;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _once2 = _interopRequireDefault(require("lodash/once"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = require("immutable");

var _v = _interopRequireDefault(require("uuid/v4"));

var _commonTags = require("common-tags");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  Netlify CMS config: ", " field: property \"options\" has been deprecated for the\n  ", " widget and will be removed in the next major release. Rather than\n  `field.options.media_library`, apply media library options for this widget under\n  `field.media_library`.\n"], ["\n  Netlify CMS config: ", " field: property \"options\" has been deprecated for the\n  ", " widget and will be removed in the next major release. Rather than\n  \\`field.options.media_library\\`, apply media library options for this widget under\n  \\`field.media_library\\`.\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const MAX_DISPLAY_LENGTH = 50;
const ImageWrapper = (0, _styledBase.default)("div", {
  target: "e1awjdnj0",
  label: "ImageWrapper"
})("flex-basis:155px;width:155px;height:100px;margin-right:20px;margin-bottom:20px;border:", _netlifyCmsUiDefault.borders.textField, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";overflow:hidden;", _netlifyCmsUiDefault.effects.checkerboard, ";", _netlifyCmsUiDefault.shadows.inset, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Image = (
/*#__PURE__*/
0, _styledBase.default)((_ref) => {
  let {
    value: src
  } = _ref;
  return (0, _core.jsx)("img", {
    src: src || '',
    role: "presentation"
  });
}, {
  target: "e1awjdnj1",
  label: "Image"
})(process.env.NODE_ENV === "production" ? {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;"
} : {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ImageAsset = (_ref2) => {
  let {
    getAsset,
    value,
    folder
  } = _ref2;
  return (0, _core.jsx)(_netlifyCmsUiDefault.Asset, {
    folder: folder,
    path: value,
    getAsset: getAsset,
    component: Image
  });
};

const MultiImageWrapper = (0, _styledBase.default)("div", {
  target: "e1awjdnj2",
  label: "MultiImageWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "2imjyh",
  styles: "display:flex;flex-wrap:wrap;"
} : {
  name: "2imjyh",
  styles: "display:flex;flex-wrap:wrap;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLink = (0, _styledBase.default)("a", {
  target: "e1awjdnj3",
  label: "FileLink"
})(process.env.NODE_ENV === "production" ? {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}"
} : {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinks = (0, _styledBase.default)("div", {
  target: "e1awjdnj4",
  label: "FileLinks"
})(process.env.NODE_ENV === "production" ? {
  name: "1upilqn",
  styles: "margin-bottom:12px;"
} : {
  name: "1upilqn",
  styles: "margin-bottom:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinkList = (0, _styledBase.default)("ul", {
  target: "e1awjdnj5",
  label: "FileLinkList"
})(process.env.NODE_ENV === "production" ? {
  name: "155za0w",
  styles: "list-style-type:none;"
} : {
  name: "155za0w",
  styles: "list-style-type:none;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileWidgetButton = (0, _styledBase.default)("button", {
  target: "e1awjdnj6",
  label: "FileWidgetButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.components.badge, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const FileWidgetButtonRemove = (0, _styledBase.default)("button", {
  target: "e1awjdnj7",
  label: "FileWidgetButtonRemove"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.components.badgeDanger, ";margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93aXRoRmlsZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUU0QyIsImZpbGUiOiIuLi8uLi9zcmMvd2l0aEZpbGVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgTWFwLCBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IG9uY2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHV1aWQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQgeyBvbmVMaW5lIH0gZnJvbSAnY29tbW9uLXRhZ3MnO1xuaW1wb3J0IHtcbiAgbGVuZ3RocyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgYm9yZGVycyxcbiAgZWZmZWN0cyxcbiAgc2hhZG93cyxcbiAgQXNzZXQsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuXG5jb25zdCBNQVhfRElTUExBWV9MRU5HVEggPSA1MDtcblxuY29uc3QgSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZmxleC1iYXNpczogMTU1cHg7XG4gIHdpZHRoOiAxNTVweDtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBib3JkZXI6ICR7Ym9yZGVycy50ZXh0RmllbGR9O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgJHtlZmZlY3RzLmNoZWNrZXJib2FyZH07XG4gICR7c2hhZG93cy5pbnNldH07XG5gO1xuXG5jb25zdCBJbWFnZSA9IHN0eWxlZCgoeyB2YWx1ZTogc3JjIH0pID0+IDxpbWcgc3JjPXtzcmMgfHwgJyd9IHJvbGU9XCJwcmVzZW50YXRpb25cIiAvPilgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG5gO1xuXG5jb25zdCBJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIHZhbHVlLCBmb2xkZXIgfSkgPT4ge1xuICByZXR1cm4gPEFzc2V0IGZvbGRlcj17Zm9sZGVyfSBwYXRoPXt2YWx1ZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0ltYWdlfSAvPjtcbn07XG5cbmNvbnN0IE11bHRpSW1hZ2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuYDtcblxuY29uc3QgRmlsZUxpbmsgPSBzdHlsZWQuYWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgY29sb3I6IGluaGVyaXQ7XG5cbiAgJjpob3ZlcixcbiAgJjphY3RpdmUsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5gO1xuXG5jb25zdCBGaWxlTGlua3MgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuYDtcblxuY29uc3QgRmlsZUxpbmtMaXN0ID0gc3R5bGVkLnVsYFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG5gO1xuXG5jb25zdCBGaWxlV2lkZ2V0QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7Y29tcG9uZW50cy5iYWRnZX07XG5gO1xuXG5jb25zdCBGaWxlV2lkZ2V0QnV0dG9uUmVtb3ZlID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7Y29tcG9uZW50cy5iYWRnZURhbmdlcn07XG4gIG1hcmdpbi10b3A6IDEycHg7XG5gO1xuXG5mdW5jdGlvbiBpc011bHRpcGxlKHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBMaXN0LmlzTGlzdCh2YWx1ZSk7XG59XG5cbmNvbnN0IHdhcm5EZXByZWNhdGVkT3B0aW9ucyA9IG9uY2UoZmllbGQgPT5cbiAgY29uc29sZS53YXJuKG9uZUxpbmVgXG4gIE5ldGxpZnkgQ01TIGNvbmZpZzogJHtmaWVsZC5nZXQoJ25hbWUnKX0gZmllbGQ6IHByb3BlcnR5IFwib3B0aW9uc1wiIGhhcyBiZWVuIGRlcHJlY2F0ZWQgZm9yIHRoZVxuICAke2ZpZWxkLmdldCgnd2lkZ2V0Jyl9IHdpZGdldCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFJhdGhlciB0aGFuXG4gIFxcYGZpZWxkLm9wdGlvbnMubWVkaWFfbGlicmFyeVxcYCwgYXBwbHkgbWVkaWEgbGlicmFyeSBvcHRpb25zIGZvciB0aGlzIHdpZGdldCB1bmRlclxuICBcXGBmaWVsZC5tZWRpYV9saWJyYXJ5XFxgLlxuYCksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoRmlsZUNvbnRyb2woeyBmb3JJbWFnZSB9ID0ge30pIHtcbiAgcmV0dXJuIGNsYXNzIEZpbGVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgZmllbGQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICAgIGdldEFzc2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgbWVkaWFQYXRoczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgICAgb25BZGRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25SZW1vdmVJbnNlcnRlZE1lZGlhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25PcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25DbGVhck1lZGlhQ29udHJvbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIG9uUmVtb3ZlTWVkaWFDb250cm9sOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY2xhc3NOYW1lV3JhcHBlcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIH07XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgdmFsdWU6ICcnLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgdGhpcy5jb250cm9sSUQgPSB1dWlkKCk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgLyoqXG4gICAgICAgKiBBbHdheXMgdXBkYXRlIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgICAgICovXG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRoZXJlIGlzIGEgbWVkaWEgcGF0aCBmb3IgdGhpcyBjb250cm9sIGluIHRoZSBzdGF0ZSBvYmplY3QsIGFuZCB0aGF0XG4gICAgICAgKiBwYXRoIGlzIGRpZmZlcmVudCB0aGFuIHRoZSB2YWx1ZSBpbiBgbmV4dFByb3BzYCwgdXBkYXRlLlxuICAgICAgICovXG4gICAgICBjb25zdCBtZWRpYVBhdGggPSBuZXh0UHJvcHMubWVkaWFQYXRocy5nZXQodGhpcy5jb250cm9sSUQpO1xuICAgICAgaWYgKG1lZGlhUGF0aCAmJiBuZXh0UHJvcHMudmFsdWUgIT09IG1lZGlhUGF0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIGNvbnN0IHsgbWVkaWFQYXRocywgdmFsdWUsIG9uUmVtb3ZlSW5zZXJ0ZWRNZWRpYSwgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBtZWRpYVBhdGggPSBtZWRpYVBhdGhzLmdldCh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICBpZiAobWVkaWFQYXRoICYmIG1lZGlhUGF0aCAhPT0gdmFsdWUpIHtcbiAgICAgICAgb25DaGFuZ2UobWVkaWFQYXRoKTtcbiAgICAgIH0gZWxzZSBpZiAobWVkaWFQYXRoICYmIG1lZGlhUGF0aCA9PT0gdmFsdWUpIHtcbiAgICAgICAgb25SZW1vdmVJbnNlcnRlZE1lZGlhKHRoaXMuY29udHJvbElEKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMub25SZW1vdmVNZWRpYUNvbnRyb2wodGhpcy5jb250cm9sSUQpO1xuICAgIH1cblxuICAgIGhhbmRsZUNoYW5nZSA9IGUgPT4ge1xuICAgICAgY29uc3QgeyBmaWVsZCwgb25PcGVuTWVkaWFMaWJyYXJ5LCB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGxldCBtZWRpYUxpYnJhcnlGaWVsZE9wdGlvbnM7XG5cbiAgICAgIC8qKlxuICAgICAgICogYG9wdGlvbnNgIGhhc2ggYXMgYSBnZW5lcmFsIGZpZWxkIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQsIG9ubHkgdXNlZFxuICAgICAgICogd2hlbiBleHRlcm5hbCBtZWRpYSBsaWJyYXJpZXMgd2VyZSBmaXJzdCBpbnRyb2R1Y2VkLiBOb3QgdG8gYmVcbiAgICAgICAqIGNvbmZ1c2VkIHdpdGggYG9wdGlvbnNgIGZvciB0aGUgc2VsZWN0IHdpZGdldCwgd2hpY2ggc2VydmVzIGEgZGlmZmVyZW50XG4gICAgICAgKiBwdXJwb3NlLlxuICAgICAgICovXG4gICAgICBpZiAoZmllbGQuaGFzSW4oWydvcHRpb25zJywgJ21lZGlhX2xpYnJhcnknXSkpIHtcbiAgICAgICAgd2FybkRlcHJlY2F0ZWRPcHRpb25zKGZpZWxkKTtcbiAgICAgICAgbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zID0gZmllbGQuZ2V0SW4oWydvcHRpb25zJywgJ21lZGlhX2xpYnJhcnknXSwgTWFwKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zID0gZmllbGQuZ2V0KCdtZWRpYV9saWJyYXJ5JywgTWFwKCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25PcGVuTWVkaWFMaWJyYXJ5KHtcbiAgICAgICAgY29udHJvbElEOiB0aGlzLmNvbnRyb2xJRCxcbiAgICAgICAgZm9ySW1hZ2UsXG4gICAgICAgIHByaXZhdGVVcGxvYWQ6IGZpZWxkLmdldCgncHJpdmF0ZScpLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgYWxsb3dNdWx0aXBsZTogISFtZWRpYUxpYnJhcnlGaWVsZE9wdGlvbnMuZ2V0KCdhbGxvd19tdWx0aXBsZScsIHRydWUpLFxuICAgICAgICBjb25maWc6IG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucy5nZXQoJ2NvbmZpZycpLFxuICAgICAgICBtZWRpYUZvbGRlcjogZmllbGQuZ2V0KCdtZWRpYV9mb2xkZXInKSxcbiAgICAgICAgcHVibGljRm9sZGVyOiBmaWVsZC5nZXQoJ3B1YmxpY19mb2xkZXInKSxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBoYW5kbGVSZW1vdmUgPSBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucHJvcHMub25DbGVhck1lZGlhQ29udHJvbCh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSgnJyk7XG4gICAgfTtcblxuICAgIHJlbmRlckZpbGVMaW5rID0gdmFsdWUgPT4ge1xuICAgICAgY29uc3Qgc2l6ZSA9IE1BWF9ESVNQTEFZX0xFTkdUSDtcbiAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoIDw9IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdGV4dCA9IGAke3ZhbHVlLnN1YnN0cmluZygwLCBzaXplIC8gMil9XFx1MjAyNiR7dmFsdWUuc3Vic3RyaW5nKFxuICAgICAgICB2YWx1ZS5sZW5ndGggLSBzaXplIC8gMiArIDEsXG4gICAgICAgIHZhbHVlLmxlbmd0aCxcbiAgICAgICl9YDtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGaWxlTGluayBocmVmPXt2YWx1ZX0gcmVsPVwibm9vcGVuZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9GaWxlTGluaz5cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJlbmRlckZpbGVMaW5rcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmIChpc011bHRpcGxlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxGaWxlTGlua3M+XG4gICAgICAgICAgICA8RmlsZUxpbmtMaXN0PlxuICAgICAgICAgICAgICB7dmFsdWUubWFwKHZhbCA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17dmFsfT57dGhpcy5yZW5kZXJGaWxlTGluayh2YWwpfTwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9GaWxlTGlua0xpc3Q+XG4gICAgICAgICAgPC9GaWxlTGlua3M+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gPEZpbGVMaW5rcz57dGhpcy5yZW5kZXJGaWxlTGluayh2YWx1ZSl9PC9GaWxlTGlua3M+O1xuICAgIH07XG5cbiAgICByZW5kZXJJbWFnZXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEFzc2V0LCB2YWx1ZSwgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBmb2xkZXIgPSBmaWVsZC5nZXQoJ21lZGlhX2ZvbGRlcicpO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TXVsdGlJbWFnZVdyYXBwZXI+XG4gICAgICAgICAgICB7dmFsdWUubWFwKHZhbCA9PiAoXG4gICAgICAgICAgICAgIDxJbWFnZVdyYXBwZXIga2V5PXt2YWx9PlxuICAgICAgICAgICAgICAgIDxJbWFnZUFzc2V0IGdldEFzc2V0PXtnZXRBc3NldH0gdmFsdWU9e3ZhbH0gZm9sZGVyPXtmb2xkZXJ9IC8+XG4gICAgICAgICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9NdWx0aUltYWdlV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxJbWFnZVdyYXBwZXI+XG4gICAgICAgICAgPEltYWdlQXNzZXQgZ2V0QXNzZXQ9e2dldEFzc2V0fSB2YWx1ZT17dmFsdWV9IGZvbGRlcj17Zm9sZGVyfSAvPlxuICAgICAgICA8L0ltYWdlV3JhcHBlcj5cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJlbmRlclNlbGVjdGlvbiA9IHN1YmplY3QgPT4ge1xuICAgICAgY29uc3QgeyB0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7Zm9ySW1hZ2UgPyB0aGlzLnJlbmRlckltYWdlcygpIDogbnVsbH1cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge2ZvckltYWdlID8gbnVsbCA6IHRoaXMucmVuZGVyRmlsZUxpbmtzKCl9XG4gICAgICAgICAgICA8RmlsZVdpZGdldEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoYW5nZX0+XG4gICAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LmNob29zZURpZmZlcmVudGApfVxuICAgICAgICAgICAgPC9GaWxlV2lkZ2V0QnV0dG9uPlxuICAgICAgICAgICAgPEZpbGVXaWRnZXRCdXR0b25SZW1vdmUgb25DbGljaz17dGhpcy5oYW5kbGVSZW1vdmV9PlxuICAgICAgICAgICAgICB7dChgZWRpdG9yLmVkaXRvcldpZGdldHMuJHtzdWJqZWN0fS5yZW1vdmVgKX1cbiAgICAgICAgICAgIDwvRmlsZVdpZGdldEJ1dHRvblJlbW92ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXJOb1NlbGVjdGlvbiA9IHN1YmplY3QgPT4ge1xuICAgICAgY29uc3QgeyB0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZpbGVXaWRnZXRCdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVDaGFuZ2V9PlxuICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LmNob29zZWApfVxuICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b24+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBjbGFzc05hbWVXcmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qgc3ViamVjdCA9IGZvckltYWdlID8gJ2ltYWdlJyA6ICdmaWxlJztcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9PlxuICAgICAgICAgIDxzcGFuPnt2YWx1ZSA/IHRoaXMucmVuZGVyU2VsZWN0aW9uKHN1YmplY3QpIDogdGhpcy5yZW5kZXJOb1NlbGVjdGlvbihzdWJqZWN0KX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0= */"));

function isMultiple(value) {
  return Array.isArray(value) || _immutable.List.isList(value);
}

const warnDeprecatedOptions = (0, _once2.default)(field => console.warn((0, _commonTags.oneLine)(_templateObject(), field.get('name'), field.get('widget'))));

function withFileControl() {
  var _class, _temp;

  let {
    forImage
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _temp = _class = class FileControl extends _react.default.Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "handleChange", e => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        e.preventDefault();
        let mediaLibraryFieldOptions;
        /**
         * `options` hash as a general field property is deprecated, only used
         * when external media libraries were first introduced. Not to be
         * confused with `options` for the select widget, which serves a different
         * purpose.
         */

        if (field.hasIn(['options', 'media_library'])) {
          warnDeprecatedOptions(field);
          mediaLibraryFieldOptions = field.getIn(['options', 'media_library'], (0, _immutable.Map)());
        } else {
          mediaLibraryFieldOptions = field.get('media_library', (0, _immutable.Map)());
        }

        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value,
          allowMultiple: !!mediaLibraryFieldOptions.get('allow_multiple', true),
          config: mediaLibraryFieldOptions.get('config'),
          mediaFolder: field.get('media_folder'),
          publicFolder: field.get('public_folder')
        });
      });

      _defineProperty(this, "handleRemove", e => {
        e.preventDefault();
        this.props.onClearMediaControl(this.controlID);
        return this.props.onChange('');
      });

      _defineProperty(this, "renderFileLink", value => {
        const size = MAX_DISPLAY_LENGTH;

        if (!value || value.length <= size) {
          return value;
        }

        const text = "".concat(value.substring(0, size / 2), "\u2026").concat(value.substring(value.length - size / 2 + 1, value.length));
        return (0, _core.jsx)(FileLink, {
          href: value,
          rel: "noopener",
          target: "_blank"
        }, text);
      });

      _defineProperty(this, "renderFileLinks", () => {
        const {
          value
        } = this.props;

        if (isMultiple(value)) {
          return (0, _core.jsx)(FileLinks, null, (0, _core.jsx)(FileLinkList, null, value.map(val => (0, _core.jsx)("li", {
            key: val
          }, this.renderFileLink(val)))));
        }

        return (0, _core.jsx)(FileLinks, null, this.renderFileLink(value));
      });

      _defineProperty(this, "renderImages", () => {
        const {
          getAsset,
          value,
          field
        } = this.props;
        const folder = field.get('media_folder');

        if (isMultiple(value)) {
          return (0, _core.jsx)(MultiImageWrapper, null, value.map(val => (0, _core.jsx)(ImageWrapper, {
            key: val
          }, (0, _core.jsx)(ImageAsset, {
            getAsset: getAsset,
            value: val,
            folder: folder
          }))));
        }

        return (0, _core.jsx)(ImageWrapper, null, (0, _core.jsx)(ImageAsset, {
          getAsset: getAsset,
          value: value,
          folder: folder
        }));
      });

      _defineProperty(this, "renderSelection", subject => {
        const {
          t
        } = this.props;
        return (0, _core.jsx)("div", null, forImage ? this.renderImages() : null, (0, _core.jsx)("div", null, forImage ? null : this.renderFileLinks(), (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t("editor.editorWidgets.".concat(subject, ".chooseDifferent"))), (0, _core.jsx)(FileWidgetButtonRemove, {
          onClick: this.handleRemove
        }, t("editor.editorWidgets.".concat(subject, ".remove")))));
      });

      _defineProperty(this, "renderNoSelection", subject => {
        const {
          t
        } = this.props;
        return (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t("editor.editorWidgets.".concat(subject, ".choose")));
      });

      this.controlID = (0, _v.default)();
    }

    shouldComponentUpdate(nextProps) {
      /**
       * Always update if the value changes.
       */
      if (this.props.value !== nextProps.value) {
        return true;
      }
      /**
       * If there is a media path for this control in the state object, and that
       * path is different than the value in `nextProps`, update.
       */


      const mediaPath = nextProps.mediaPaths.get(this.controlID);

      if (mediaPath && nextProps.value !== mediaPath) {
        return true;
      }

      return false;
    }

    componentDidUpdate() {
      const {
        mediaPaths,
        value,
        onRemoveInsertedMedia,
        onChange
      } = this.props;
      const mediaPath = mediaPaths.get(this.controlID);

      if (mediaPath && mediaPath !== value) {
        onChange(mediaPath);
      } else if (mediaPath && mediaPath === value) {
        onRemoveInsertedMedia(this.controlID);
      }
    }

    componentWillUnmount() {
      this.props.onRemoveMediaControl(this.controlID);
    }

    render() {
      const {
        value,
        classNameWrapper
      } = this.props;
      const subject = forImage ? 'image' : 'file';
      return (0, _core.jsx)("div", {
        className: classNameWrapper
      }, (0, _core.jsx)("span", null, value ? this.renderSelection(subject) : this.renderNoSelection(subject)));
    }

  }, _defineProperty(_class, "propTypes", {
    field: _propTypes.default.object.isRequired,
    getAsset: _propTypes.default.func.isRequired,
    mediaPaths: _reactImmutableProptypes.default.map.isRequired,
    onAddAsset: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired,
    onRemoveInsertedMedia: _propTypes.default.func.isRequired,
    onOpenMediaLibrary: _propTypes.default.func.isRequired,
    onClearMediaControl: _propTypes.default.func.isRequired,
    onRemoveMediaControl: _propTypes.default.func.isRequired,
    classNameWrapper: _propTypes.default.string.isRequired,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
    t: _propTypes.default.func.isRequired
  }), _defineProperty(_class, "defaultProps", {
    value: ''
  }), _temp;
}